<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd ">
    <munit:config name="healthy-canada-system-api-apikit-test.xml" />
    <http:request-config name="HTTP_Request_Configuration" basePath="/hc" doc:name="HTTP Request configuration">
        <http:request-connection host="localhost" port="${http.port}" />
    </http:request-config>
    
    <munit:test name="test-multiple-results" description="Verifying functionality of the API with multiple results returned">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="healthy-canada-system-api-main" />
            <munit:enable-flow-source value="get:\recalls\(searchTerm):healthy-canada-system-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call to HC API" doc:id="e1c1d9ca-5961-4dd7-a10e-890bafc17794" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Call HC API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample_data/multiple-responses.json')]" mediaType="application/json"/>
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/recalls/searchTerm" doc:name="Request">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_multiple_results.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-single-result" description="Verifying functionality of the API with a single result returned">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="healthy-canada-system-api-main" />
            <munit:enable-flow-source value="get:\recalls\(searchTerm):healthy-canada-system-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call to HC API" doc:id="18d17a9f-7519-4fa4-88f3-48a9a242295f" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Call HC API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample_data/single-response.json')]" mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/recalls/searchTerm" doc:name="Request">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_single_result.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-404-result" description="Verifying functionality of the API with no results returned">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="healthy-canada-system-api-main" />
            <munit:enable-flow-source value="get:\recalls\(searchTerm):healthy-canada-system-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call to HC API" doc:id="60619333-659f-4aa7-a939-fe727efde627" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Call HC API"/>
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[MunitTools::getResourceAsString('sample_data/no-responses.json')]" mediaType="application/json" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/recalls/searchTerm" doc:name="Request">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,404" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
        </munit:validation>
    </munit:test>
</mule>
